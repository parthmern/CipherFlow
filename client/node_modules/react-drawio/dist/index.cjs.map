{"version":3,"file":"index.cjs","sources":["../src/utils/getEmbedUrl.ts","../src/utils/handleEvent.ts","../src/hooks/useActions.ts","../src/DrawIoEmbed.tsx"],"sourcesContent":["import { UrlParameters } from '../types';\r\n\r\nexport const getEmbedUrl = (\r\n  urlParameters?: UrlParameters,\r\n  addConfiguration?: boolean\r\n) => {\r\n  const url = new URL('/', 'https://embed.diagrams.net');\r\n  const urlSearchParams = new URLSearchParams();\r\n\r\n  urlSearchParams.append('proto', 'json');\r\n\r\n  if (addConfiguration) {\r\n    urlSearchParams.append('configure', '1');\r\n  }\r\n\r\n  if (urlParameters) {\r\n    Object.keys(urlParameters).forEach((key) => {\r\n      const value = urlParameters[key as keyof UrlParameters];\r\n\r\n      if (value) {\r\n        if (typeof value === 'boolean') {\r\n          urlSearchParams.append(key, value ? '1' : '0');\r\n        } else {\r\n          urlSearchParams.append(key, value.toString());\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  url.search = urlSearchParams.toString();\r\n\r\n  return url.toString();\r\n};\r\n","import { EmbedEvents } from '../types';\r\n\r\ntype EventHandler = {\r\n  [key in EmbedEvents['event']]?: (data: Extract<EmbedEvents, { event: key }>) => void;\r\n};\r\n\r\nexport function handleEvent(event: MessageEvent, handlers: EventHandler) {\r\n  if (!event.origin.includes('embed.diagrams.net')) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const data = JSON.parse(event.data) as EmbedEvents;\r\n\r\n    if (data.event in handlers) {\r\n      const handler = handlers[data.event];\r\n\r\n      if (handler) {\r\n        // @ts-ignore Not sure how to fix for now\r\n        handler(data);\r\n      }\r\n    }\r\n  } catch {\r\n    //\r\n  }\r\n};\r\n","import { RefObject } from 'react';\r\nimport { ActionConfigure, ActionDialog, ActionDraft, ActionExport, ActionLayout, ActionLoad, ActionMerge, ActionPrompt, ActionSpinner, ActionStatus, ActionTemplate, EmbedActions } from '../types';\r\n\r\ntype UniqueActionProps<T> = Omit<T, 'action'>;\r\n\r\nexport const useActions = (iframeRef: RefObject<HTMLIFrameElement | null>) => {\r\n  const sendAction = (\r\n    action: string,\r\n    data: UniqueActionProps<EmbedActions>\r\n  ) => {\r\n    iframeRef.current?.contentWindow?.postMessage(\r\n      JSON.stringify({\r\n        action,\r\n        ...data\r\n      }),\r\n      '*'\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Load the contents of a diagram\r\n   */\r\n  const load = (data: UniqueActionProps<ActionLoad>) => {\r\n    sendAction('load', data);\r\n  };\r\n\r\n  const configure = (data: UniqueActionProps<ActionConfigure>) => {\r\n    sendAction('configure', data);\r\n  };\r\n\r\n  /**\r\n   * Merge the contents of the given XML into the current file\r\n   */\r\n  const merge = (data: UniqueActionProps<ActionMerge>) => {\r\n    sendAction('merge', data);\r\n  };\r\n\r\n  /**\r\n   * Display a dialog in the editor window\r\n   */\r\n  const dialog = (data: UniqueActionProps<ActionDialog>) => {\r\n    sendAction('dialog', data);\r\n  };\r\n\r\n  /**\r\n   * Display a prompt in the editor window\r\n   */\r\n  const prompt = (data: UniqueActionProps<ActionPrompt>) => {\r\n    sendAction('prompt', data);\r\n  };\r\n\r\n  /**\r\n   * Show the template dialog\r\n   */\r\n  const template = (data: UniqueActionProps<ActionTemplate>) => {\r\n    sendAction('template', data);\r\n  };\r\n\r\n  /**\r\n   * Runs an array of layouts using the same format as Arrange > Layout > Apply.\r\n   */\r\n  const layout = (data: UniqueActionProps<ActionLayout>) => {\r\n    sendAction('layout', data);\r\n  };\r\n\r\n  /**\r\n   * Show a draft dialog\r\n   */\r\n  const draft = (data: UniqueActionProps<ActionDraft>) => {\r\n    sendAction('draft', data);\r\n  };\r\n\r\n  /**\r\n   * Display a message in the status bar\r\n   */\r\n  const status = (data: UniqueActionProps<ActionStatus>) => {\r\n    sendAction('status', data);\r\n  };\r\n\r\n  /**\r\n   * Display a spinner with a message or hide the current spinner if show is set to false\r\n   */\r\n  const spinner = (data: UniqueActionProps<ActionSpinner>) => {\r\n    sendAction('spinner', data);\r\n  };\r\n\r\n  const exportDiagram = (data: UniqueActionProps<ActionExport>) => {\r\n    sendAction('export', data);\r\n  };\r\n\r\n  return {\r\n    load,\r\n    configure,\r\n    merge,\r\n    dialog,\r\n    prompt,\r\n    template,\r\n    layout,\r\n    draft,\r\n    status,\r\n    spinner,\r\n    exportDiagram\r\n  };\r\n};\r\n","import {\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState\r\n} from 'react';\r\nimport { DrawIoEmbedProps, DrawIoEmbedRef } from './types';\r\nimport { getEmbedUrl } from './utils/getEmbedUrl';\r\nimport { handleEvent } from './utils/handleEvent';\r\nimport { useActions } from './hooks/useActions';\r\nimport React from 'react';\r\n\r\nexport const DrawIoEmbed = forwardRef<DrawIoEmbedRef, DrawIoEmbedProps>(\r\n  (props, ref) => {\r\n    const {\r\n      urlParameters,\r\n      configuration,\r\n      xml,\r\n      exportFormat,\r\n      onSave,\r\n      onClose,\r\n      onLoad,\r\n      onConfigure,\r\n      onDraft,\r\n      onExport,\r\n      onMerge,\r\n      onPrompt,\r\n      onTemplate\r\n    } = props;\r\n\r\n    const iframeRef = useRef<HTMLIFrameElement>(null);\r\n    const action = useActions(iframeRef);\r\n    const iframeUrl = getEmbedUrl(urlParameters, !!configuration);\r\n    const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n    const messageHandler = (evt: MessageEvent) => {\r\n      handleEvent(evt, {\r\n        init: () => {\r\n          setIsInitialized(true);\r\n        },\r\n        load: (data) => {\r\n          if (onLoad) {\r\n            onLoad(data);\r\n          }\r\n        },\r\n        configure: (data) => {\r\n          if (configuration) {\r\n            action.configure({ config: configuration });\r\n          }\r\n\r\n          if (onConfigure) {\r\n            onConfigure(data);\r\n          }\r\n        },\r\n        save: (data) => {\r\n          action.exportDiagram({\r\n            format: exportFormat || 'xmlsvg',\r\n            // @ts-ignore not allowed normally, but only for internal use\r\n            exit: data.exit\r\n          });\r\n        },\r\n        exit: (data) => {\r\n          if (onClose) {\r\n            onClose(data);\r\n          }\r\n        },\r\n        draft: (data) => {\r\n          if (onDraft) {\r\n            onDraft(data);\r\n          }\r\n        },\r\n        export: (data) => {\r\n          if (onSave) {\r\n            onSave({\r\n              event: 'save',\r\n              xml: data.data\r\n            });\r\n          }\r\n\r\n          if (onExport) {\r\n            onExport(data);\r\n          }\r\n\r\n          // @ts-ignore not allowed normally, but only for internal use\r\n          if (data.message.exit && onClose) {\r\n            onClose({\r\n              event: 'exit',\r\n              modified: true\r\n            });\r\n          }\r\n        },\r\n        merge: (data) => {\r\n          if (onMerge) {\r\n            onMerge(data);\r\n          }\r\n        },\r\n        prompt: (data) => {\r\n          if (onPrompt) {\r\n            onPrompt(data);\r\n          }\r\n        },\r\n        template: (data) => {\r\n          if (onTemplate) {\r\n            onTemplate(data);\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        ...action\r\n      }),\r\n      []\r\n    );\r\n\r\n    useEffect(() => {\r\n      if (isInitialized) {\r\n        if (xml) {\r\n          if (exportFormat === 'xmlpng') {\r\n            action.load({ xmlpng: xml });\r\n          } else {\r\n            action.load({ xml });\r\n          }\r\n        } else {\r\n          action.load({ xml: '' });\r\n        }\r\n      }\r\n    }, [isInitialized, xml]);\r\n\r\n    // Initial load\r\n    useEffect(() => {\r\n      window.addEventListener('message', messageHandler);\r\n\r\n      return () => {\r\n        window.removeEventListener('message', messageHandler);\r\n      };\r\n    }, []);\r\n\r\n    return (\r\n      <iframe\r\n        className=\"diagrams-iframe\"\r\n        src={iframeUrl}\r\n        ref={iframeRef}\r\n        title=\"Diagrams.net\"\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          minWidth: '400px',\r\n          minHeight: '400px',\r\n          border: 'none'\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\n"],"names":["getEmbedUrl","urlParameters","addConfiguration","url","URL","urlSearchParams","URLSearchParams","append","Object","keys","forEach","key","value","toString","search","handleEvent","event","handlers","origin","includes","data","JSON","parse","handler","useActions","iframeRef","sendAction","action","current","contentWindow","postMessage","stringify","load","configure","merge","dialog","prompt","template","layout","draft","status","spinner","exportDiagram","DrawIoEmbed","forwardRef","props","ref","configuration","xml","exportFormat","onSave","onClose","onLoad","onConfigure","onDraft","onExport","onMerge","onPrompt","onTemplate","useRef","iframeUrl","isInitialized","setIsInitialized","useState","messageHandler","evt","init","config","save","format","exit","export","message","modified","useImperativeHandle","useEffect","xmlpng","window","addEventListener","removeEventListener","iframe","className","src","title","style","width","height","minWidth","minHeight","border"],"mappings":"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"}